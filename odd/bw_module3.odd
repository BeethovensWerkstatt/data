<?xml version="1.0" encoding="UTF-8"?>
<!-- 

  This ODD customization is based on Work of the Music Encoding Initiative. 

-->
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:rng="http://relaxng.org/ns/structure/1.0"
  xmlns:sch="http://purl.oclc.org/dsdl/schematron">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>Beethovens Werkstatt – ODD Customization for the third module</title>
        <respStmt>
          <resp>Authored by</resp>
          <name xml:id="JK">Johannes Kepper</name>
        </respStmt>
      </titleStmt>
      <publicationStmt>
        <p/>
      </publicationStmt>
      <sourceDesc>
        <p/>
      </sourceDesc>
    </fileDesc>
  </teiHeader>
  <text>
    <front>
      <divGen type="toc"/>
    </front>
    <body>

      <!-- Limit the set of possible start elements -->
      <schemaSpec ident="mei" ns="http://www.music-encoding.org/ns/mei" prefix="mei_"
        start="mei meiCorpus notesStmt">

        <!-- Declare MEI and XLink and SVG namespaces for use in Schematron -->
        <constraintSpec ident="set_ns" scheme="schematron" mode="add">
          <constraint>
            <sch:ns xmlns:sch="http://purl.oclc.org/dsdl/schematron" prefix="mei"
              uri="http://www.music-encoding.org/ns/mei"/>
            <sch:ns xmlns:sch="http://purl.oclc.org/dsdl/schematron" prefix="xlink"
              uri="http://www.w3.org/1999/xlink"/>
            <sch:ns xmlns:sch="http://purl.oclc.org/dsdl/schematron" prefix="svg"
              uri="http://www.w3.org/2000/svg"/>
            <sch:ns xmlns:sch="http://purl.oclc.org/dsdl/schematron" prefix="tei"
              uri="http://www.tei-c.org/ns/1.0"/>
          </constraint>
        </constraintSpec>

        <moduleRef key="MEI"/>
        <moduleRef key="MEI.analytical" />
        <moduleRef key="MEI.cmn"/>
        <moduleRef key="MEI.cmnOrnaments"/>
        <moduleRef key="MEI.critapp"/>
        <moduleRef key="MEI.edittrans"/>
        <moduleRef key="MEI.facsimile"/>
        <moduleRef key="MEI.figtable"/>
        <moduleRef key="MEI.fingering"/>
        <moduleRef key="MEI.frbr"/>
        <moduleRef key="MEI.genetic"/>
        <moduleRef key="MEI.gestural"/>
        <moduleRef key="MEI.harmony"/>
        <moduleRef key="MEI.header"/>
        <moduleRef key="MEI.lyrics"/>
        <moduleRef key="MEI.corpus"/>
        <moduleRef key="MEI.msDesc"/>
        <moduleRef key="MEI.namesdates"/>
        <moduleRef key="MEI.ptrref"/>
        <moduleRef key="MEI.shared"/>
        <moduleRef key="MEI.text"/>
        <moduleRef key="MEI.visual"/>
        <moduleRef key="MEI.externalsymbols"/>

        <!-- Include SVG -->
        <moduleRef url="https://www.tei-c.org/release/xml/tei/custom/schema/relaxng/svg11.rng"
          prefix="svg_">
          <content>
            <rng:define name="mei_model.graphicLike" combine="choice">
              <rng:ref name="svg_svg"/>
            </rng:define>
          </content>
        </moduleRef>
        <!--  ../rng/tei_bw.rng -->
        <moduleRef url="https://tei-c.org/release/xml/tei/custom/schema/relaxng/tei_all.rng"
          prefix="tei_">
          <content>
            <rng:define name="mei_model.divLike" combine="choice">
              <rng:ref name="tei_div"/>
            </rng:define>
            <rng:define name="tei_model.noteLike" combine="choice">
              <rng:choice>
                <rng:ref name="mei_metaMark"/>
                <rng:ref name="mei_annot"/>  
              </rng:choice>
            </rng:define>
            <rng:define name="tei_notatedMusic" combine="choice">
              <!-- allow complete music examples to be embedded in notatedMusic -->
              <rng:element name="notatedMusic">
                <rng:zeroOrMore>
                  <rng:choice>
                    <rng:ref name="tei_model.labelLike"/>
                    <!--<rng:ref name="tei_model.ptrLike"/>-->
                    <rng:ref name="tei_graphic"/>
                    <rng:ref name="mei_section"/>
                    <!--<rng:ref name="tei_binaryObject"/>-->
                    <!--<rng:ref name="tei_seg"/>-->
                  </rng:choice>
                </rng:zeroOrMore>
                <rng:ref name="tei_att.global.attributes"/>
                <rng:ref name="tei_att.placement.attributes"/>
                <rng:ref name="tei_att.typed.attributes"/>
                <rng:empty/>
              </rng:element>  
            </rng:define>
          </content>
        </moduleRef>
        
        <elementSpec ident="section" module="MEI.shared" mode="change">
          <constraintSpec ident="section_in_tei" scheme="isoschematron" mode="add">
            <constraint>
              <sch:rule context="mei:section[parent::tei:notatedMusic]">
                <sch:assert role="error" test="child::element()[1][local-name() = 'scoreDef']">An mei:section embedded into TEI needs to have a scoreDef as first child.</sch:assert>                                
              </sch:rule>
            </constraint>
          </constraintSpec>        
        </elementSpec>
        
        <!-- Disable mensural- and neume-specific model classes in the shared module -->
        <classSpec ident="model.scorePart.mensuralAndNeumes" module="MEI.shared" type="model"
          mode="delete"/>
        <classSpec ident="model.sectionPart.mensuralAndNeumes" module="MEI.shared" type="model"
          mode="delete"/>
        <classSpec ident="model.staffPart.mensuralAndNeumes" module="MEI.shared" type="model"
          mode="delete"/>
        <classSpec ident="model.layerPart.mensuralAndNeumes" module="MEI.shared" type="model"
          mode="delete"/>

        <!-- Move model.noteModifierLike from layerPart.mensuralAndNeumes to editTransPart.music -->
        <classSpec ident="model.noteModifierLike" module="MEI.shared" type="model" mode="replace">
          <desc>Groups elements that modify note-like features.</desc>
          <classes>
            <memberOf key="model.editTransPart.music"/>
          </classes>
        </classSpec>
        
        <!-- allow @facs references to SVG shapes -->
        <classSpec ident="att.facsimile" module="MEI.facsimile" type="atts" mode="replace">
          <desc>Attributes that associate a feature corresponding with all or part of an image.</desc>
          <attList org="group">
            <attDef ident="facs" usage="opt">
              <desc>Permits the current element to reference a facsimile surface or image zone which corresponds to it.</desc>
              <datatype maxOccurs="unbounded" minOccurs="1">
                <rng:ref name="data.URI" />
              </datatype>
              <constraintSpec ident="check_facsTarget" scheme="isoschematron" mode="replace">
                <constraint>
                  <sch:rule context="@facs">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@facs attribute should have content.</sch:assert>
                    <sch:assert role="warning" test="normalize-space(.) = .">@facs should use normalized space</sch:assert>
                    <sch:assert role="warning" test="(every $i in tokenize(., '\s+') satisfies substring($i,2)=(//mei:surface/@xml:id, //mei:zone/@xml:id, //svg:path/@id)) or ancestor::mei:mei//mei:encodingDesc['#bw_module3_textFile' = tokenize(@class,' ')]">Each value in @facs should correspond to the @xml:id attribute of a surface or zone element, or to an svg:shape's @id attribute.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
        </classSpec>
        
        <!-- add manifestation constraints -->
        <elementSpec ident="manifestation" module="MEI.frbr" mode="change">
          <constraintSpec ident="manifestationDetails" scheme="isoschematron" mode="add">
            <constraint>
              <sch:rule context="mei:manifestation">
                <sch:assert role="error" test="mei:physLoc">Every manifestation needs a physLoc child element.</sch:assert>
                <sch:assert role="error" test="mei:physLoc/mei:repository/mei:identifier[@auth.uri]/text()">We need an identifier for the repo holding the document.</sch:assert>
                <sch:assert role="error" test="mei:physLoc/mei:identifier/text()">We need the siglum within the holding repository.</sch:assert>                
              </sch:rule>
            </constraint>
          </constraintSpec>        
        </elementSpec>
        
        <!-- add schematron constraints -->
        <elementSpec ident="add" module="MEI.edittrans" mode="change">
          <constraintSpec ident="add_hasState" scheme="isoschematron" mode="add">
            <constraint>
              <sch:rule context="mei:add">
                <sch:assert role="error" test="@state">Every add element needs to have a @state attribute.</sch:assert>
                <sch:assert role="error" test="not(contains(@state,' '))">Only a single state may be referenced from an add element.</sch:assert>
                <sch:assert role="error" test="starts-with(@state, '#') and substring(@state,2) = (//mei:genState/@xml:id, collection(substring-before(document-uri(/),'/manifestations') || '/?select=*.xml')//mei:genState/@xml:id)">Every add needs to point to a genState element's @xml:id</sch:assert>                
              </sch:rule>
            </constraint>
          </constraintSpec>        
        </elementSpec>
        
        <!-- del schematron constraints -->
        <elementSpec ident="del" module="MEI.edittrans" mode="change">
          <constraintSpec ident="del_hasState" scheme="isoschematron" mode="add">
            <constraint>
              <sch:rule context="mei:del">
                <sch:assert role="error" test="@state">Every del element needs to have a @state attribute.</sch:assert>
                <sch:assert role="error" test="not(contains(@state,' '))">Only a single state may be referenced from an del element.</sch:assert>
                <sch:assert role="error" test="starts-with(@state, '#') and substring(@state,2) = (//mei:genState/@xml:id, collection(substring-before(document-uri(/),'/manifestations') || '/?select=*.xml')//mei:genState/@xml:id)">Every del needs to point to a genState element's @xml:id</sch:assert>                
              </sch:rule>
            </constraint>
          </constraintSpec>        
        </elementSpec>
        
        <!-- we have stricter rules for that -->
        <classSpec ident="att.geneticState" module="MEI.genetic" type="atts" mode="change">
          <desc>Attributes that pertain to a genetic state.</desc>
          <constraintSpec ident="check_changeState.targets" scheme="schematron" mode="delete"/>
        </classSpec>
        
        <!-- mdiv schematron constraints -->
        <elementSpec ident="mdiv" module="MEI.shared" mode="change">
          <constraintSpec ident="mdiv_constraints" scheme="isoschematron" mode="add">
            <constraint>
              <sch:rule context="mei:mdiv">
                <sch:assert role="error" test="@xml:id and string-length(@xml:id) gt 5">Every mdiv element needs an @xml:id, and it needs to have a sufficient length. You should use UUIDs!</sch:assert>                                
              </sch:rule>
            </constraint>
          </constraintSpec>        
        </elementSpec>
        
        <elementSpec ident="annot" module="MEI.shared" mode="change">
          <constraintSpec ident="Check_annot_data" scheme="isoschematron" mode="replace">
            <constraint>
              <sch:rule context="mei:annot[@data]">
                <sch:assert test="ancestor::mei:notesStmt or (@class and '#bw_module3_staticExample' = tokenize(normalize-space(@class), ' '))">The @data attribute may only occur on an annotations within the notesStmt element, or when there is a class #bw_module3_staticExample".</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>
        
        <elementSpec ident="metaMark" module="MEI.edittrans" mode="change">
          
          <!-- metaMark must have @source -->
          <constraintSpec ident="metaMark_source" scheme="isoschematron" mode="add">
            <constraint>
              <sch:rule context="mei:metaMark">
                <sch:assert role="error" test="@source or ancestor::mei:mei//mei:manifestation">
                  metaMark must have a @source attribute or be used in the context of a source file
                </sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <!-- metaMark must be inside measure -->
          <constraintSpec ident="metaMark_source" scheme="isoschematron" mode="add">
            <constraint>
              <sch:rule context="mei:metaMark">
                <sch:assert role="error" test="ancestor::mei:measure or (not(ancestor::tei:notatedMusic) and ancestor::tei:div)">
                  A metaMark must be placed inside measures. 
                </sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          
          <constraintSpec ident="metaMark_start-type_attributes_required" scheme="schematron" mode="change">
            <constraint>
              <sch:rule context="mei:metaMark">
                <sch:assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real or @place = ('rightmar','leftmar')">Must have one of the attributes: startid, tstamp, tstamp.ges or tstamp.real</sch:assert>
                <sch:assert role="warning" test="not(@place = 'leftmar') or @type = 'translate_dir place_above'">A metaMark on the left margin needs to be translated to a dir in order to be displayed with Verovio. Currently only supported with @type="translate_dir place_above".</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          
          <constraintSpec ident="metaMark_checkState" scheme="schematron" mode="add">
            <constraint>
              <sch:rule context="mei:metaMark">
                <sch:assert test="@state or not('#bw_monitum' = tokenize(normalize-space(@class)))">A monitum needs to have state information</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          
          <constraintSpec ident="metaMark_checkPositioning" scheme="schematron" mode="add">
            <constraint>
              <sch:rule context="mei:metaMark">
                <sch:assert test="not('translate_dir' = tokenize(normalize-space(@type),' ') and @place = 'rightmar')">A right margin monitum must not use the translate to dir instruction – placement will be done automatically. Otherwise, it would be duplicated in the output.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>
        
        <elementSpec ident="annot" module="MEI.shared" mode="change">
          
          <!-- check classes on annots -->
          <constraintSpec ident="annot_classes" scheme="isoschematron" mode="add">
            <constraint>
              <sch:rule context="mei:annot[contains(@class,'#bw_monitum_effect')]/mei:relation">
                <sch:assert role="error" test="@target and starts-with(@target,'#') and normalize-space(@target) = @target">Every relation needs a properly formatted @target.</sch:assert>
                <sch:assert role="error" test="not(contains(@target,' '))">If there are multiple targets, they should be encoded with multiple relation elements of the same type (@rel).</sch:assert>
                <sch:assert role="error" test="not(@rel = ('succeeding', 'preceding', 'original')) or 
                  substring(@target,2) = collection(substring-before(document-uri(/),'/edition') || '/manifestations/?select=*.xml')//mei:annot/@xml:id[contains(parent::mei:annot/@class,'#bw_monitum_context')]">
                  succeeding / preceding / original relations must point to #bw_monitum_context annots in manifestation files.
                </sch:assert>
                <sch:assert role="error" test="not(@rel = ('consituent')) or 
                  substring(@target,2) = collection(substring-before(document-uri(/),'/edition') || '/manifestations/?select=*.xml')//mei:metaMark/@xml:id[contains(parent::mei:metaMark/@class,'#bw_monitum')]">
                  consituent relations must point to #bw_monitum metaMark in manifestation files.
                </sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>
        
        
        <!-- bugfix to allow zero staff lines -->
        <classSpec ident="att.staffDef.log" module="MEI.shared" type="atts" mode="change">
          <attList>
            <attDef ident="lines" usage="opt" mode="change">
              <datatype>
                <rng:data type="nonNegativeInteger"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        
        
        <!-- this is only a bugfix which hopefully will be fixed in MEI itself -->
        <classSpec ident="att.metaMark.log" module="MEI.edittrans" type="atts" mode="replace">
          <desc>Logical domain attributes.</desc>
          <classes>
            <memberOf key="att.controlEvent"/>
            <memberOf key="att.startEndId"/>
            <memberOf key="att.timestamp2.logical"/>
            <memberOf key="att.edit"/>
            <memberOf key="att.trans"/>
          </classes>
        </classSpec>
        
        <classSpec ident="att.metaMark.vis" module="MEI.edittrans" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <!--<classes>
            <memberOf key="att.placementRelStaff"/>
          </classes>-->
          <attList>
            <attDef ident="place" usage="opt">
              <desc>Location of the annotation.</desc>
              <datatype maxOccurs="unbounded">
                <rng:ref name="data.PLACEMENT"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        
        <classSpec ident="att.classed" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes which can be used to classify features.</desc>
          <attList>
            <attDef ident="class" usage="opt">
              <desc>Contains one or more URIs which denote classification terms that apply to the entity bearing this attribute.</desc>
              <datatype maxOccurs="unbounded">
                <rng:ref name="data.URI"/>
              </datatype>
              <!-- TODO: fix this -->
              <!--<constraintSpec ident="check_classURI" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@class">
                    <sch:let name="file.path.raw" value="document-uri(/)"/>
                    <sch:let name="work.identifier" value="substring-before(substring-after($file.path.raw,'/module3/'),'/')"/>
                    <sch:let name="corpus.path" value="substring-before($file.path.raw,'/module3/'||$work.identifier) || '/module3/' || $work.identifier || '/' || $work.identifier || '_editionCorpus.xml'"/>
                    <sch:let name="corpus.file" value="doc($corpus.path)"/>
                    <sch:assert test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:category/@xml:id or matches($i, '^([a-z]+://|\.{1,2}/)') or substring($i,2)=$corpus.file//mei:category/@xml:id">The value in @class must either correspond to the @xml:id attribute of a category element or be an external URL.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>-->
            </attDef>
          </attList>
        </classSpec>
        
      </schemaSpec>
    </body>
  </text>
</TEI>
